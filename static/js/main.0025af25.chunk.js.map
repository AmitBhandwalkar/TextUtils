{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/Textform.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","role","msg","Navbar","mode","href","title","type","id","onClick","swithMode","htmlFor","Textform","useState","text","settext","placeholder","rows","value","onChange","event","target","style","color","backgroundColor","str","toUpperCase","showalert","toLowerCase","length","split","App","setMode","setalert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0025af25.chunk.js","sourcesContent":["import React from 'react'\r\n//refc\r\nfunction Alert(props) {\r\n\r\n    return (\r\n      props.alert &&  <div className=\"container text-center\">\r\n            <div className=\"alert alert-warning alert-dismissible fade show\" role=\"alert\">\r\n            <strong>{props.alert.msg}</strong> \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <div>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"/navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                            </li>\r\n                           \r\n                               \r\n\r\n                        </ul>\r\n                     \r\n                        <div className={`form-check form-switch text-${props.mode==='light' ? 'dark' : 'light'}`}>\r\n                            <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick={props.swithMode} />\r\n                            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{`${props.mode==='light'?'Enable':'Disable' } dark Mode`}</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n}","//use rfc\r\nimport React, { useState } from 'react'\r\n\r\nexport default function Textform(props) {\r\n\r\n\r\n   const [text, settext] = useState(\"\")\r\n\r\n\r\n\r\n   const handelOnClick = ()=>{\r\n    let str = text.toUpperCase()\r\n    settext(str)\r\n    props.showalert('Upercase',\"sucess\")\r\n   }\r\n   const handelOnClick2 = ()=>{\r\n       let str = text.toLowerCase()\r\n       settext(str)\r\n       props.showalert('Lowercase',\"sucess\")\r\n   }\r\n\r\n   const handelOnChange = (event)=>{\r\n        settext(event.target.value)\r\n       \r\n   }\r\n\r\n   const dark = {  \r\n    color: \"white\",  \r\n    backgroundColor: \"black\",    \r\n  }; \r\n   \r\n  const white = {\r\n      color:\"black\",\r\n      backgroundColor:\"white\"\r\n  }\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\">\r\n            <div className=\"mb-3 text-center\">\r\n            <label htmlFor=\"mybox\" className=\"form-label\"><h2>Enter Text To Analyis</h2></label>\r\n                <textarea className=\"form-control\" id=\"mybox\" placeholder=\"Enter text here\" rows=\"8\" value={text} onChange={handelOnChange} \r\n                style={props.mode==='dark' ? dark: white}>\r\n                </textarea>\r\n            </div>\r\n             <button type=\"button\" className=\"btn btn-success mx-3\" onClick={handelOnClick} >Convert TO UperCase</button>\r\n             <button type=\"button\" className=\"btn btn-success\" onClick={handelOnClick2}>Convert To LoweCase</button>\r\n        </div>\r\n        <div className=\"container my-5\">\r\n            <h2>Your text summary </h2>\r\n            <p> <b> {text.length} </b> characters AND <b>{text.split(\" \").length} </b> words </p>\r\n            <p>{0.008 *text.split(\" \").length} Minutes to read</p>\r\n        </div>\r\n      </>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\nimport './App.css';\nimport Alert from './components/Alert';\n//import About from './components/About';\nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\n\nfunction App() {\n\n  const [mode, setMode] = useState('light');\n  const swithMode = () => {\n\n    if (mode === 'light') {\n      setMode('dark')\n      document.body.style.backgroundColor = \"black\";\n      document.body.style.color = \"white\";\n      showalert(\"dark mode is enable\", \"suscess\")\n    }\n    else {\n      setMode('light')\n      document.body.style.backgroundColor = \"white\";\n      document.body.style.color = \"black\";\n      showalert(\"dark mode is disable\", \"suscess\")\n    }\n  }\n\n  const [alert, setalert] = useState(null)\n\n  const showalert = (message, type) => {\n    setalert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setalert(null)\n    }, 1500);\n\n  }\n\n\n\n  return (\n    <div>\n\n     \n\n        <Navbar title=\"TextUtils\" mode={mode} swithMode={swithMode} />\n        <Alert alert={alert} />\n      \n      \n      \n            <Textform mode={mode} showalert={showalert} />\n     \n\n\n\n\n\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}